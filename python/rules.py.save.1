import paho.mqtt.client as mqtt
import time
import csv
import mysql.connector


def on_connect(client, userdata, flags, rc):
  print("Connected with result code" + str(rc))
  client.subscribe("osh/all/test/com", 0)
  client.subscribe("osh/kit/coffee/prep", 0)
  client.subscribe("osh/kit/coffee/stat", 0)
  client.subscribe("osh/1738927/io/butt1", 0)
  client.subscribe("012/1675495/io/butt1", 0)
  client.subscribe("018/1675495/io/butt1", 0)

def on_message(client, userdata, msg):
  print(msg.topic + " " + str(msg.payload))
  serial = msg.topic[4:11]
  type = msg.topic[0:3]
  rules(serial, type, msg.topic)

def verify(serial):
    sql = "SELECT * FROM rules WHERE source='%s'" % serial
    query.execute(sql)
    db.commit()
    count = query.rowcount
    print count
    if count > 0:
      client.publish("all/stat", "RETURNED GOOD")
      row = query.fetchone()
      for row in query:
        print row
        row = query.fetchone()
      return query
    else:
      client.publish("all/stat", "NOT QUITE")
      return False

def rules(serial, type, topic):
  if type == "018":
    result = verify(serial)
    if not result:
      return False
#    else:
#      for (user_name, id) in result:
#        print "User: %s, id: %d" % user_name, id
#  if serial == '1738927':
#    if (topic[15:20] == "butt1"):
#      print time.time() * 1000
#      print time.time() * 1000 - int(float(timeKeep[serial]))
#      if  (time.time() * 1000 - int(float(timeKeep[serial]))) < doubleTime:
#        client.publish("osh/" + serial + "/gpio/12", "TOG", 0, False)
#      else:
#        timeKeep[serial] = time.time() * 1000

doubleTime = 700
infile = open('assets/timeKeep.csv', 'r')
timeKeep = dict(csv.reader(infile))

db = mysql.connector.connect(user='pythonUser', password='24518000pythonUser', host='ha-records.cxdm8r7jhkbf.us-east-1.rds.amazonaws.com', database='ha_records')
query = db.cursor(buffered = True)

client = mqtt.Client(client_id="aws1", clean_session=False)
client.on_connect = on_connect
client.on_message = on_message

client.username_pw_set("aws", "24518000aws")
client.connect("mqtt.oreillyj.com", 1883, 60)

client.loop_forever()
